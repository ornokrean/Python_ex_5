maayanchetrit
ornokrean


=============================
=      File description     =
=============================
the code is packed in packages, and the hierarchy is that the filesprocessing package contains all the other
packages, and the packages inside are:

* FileProcessingExceptions package, that holds all the program exceptions classes:

BadFormatException.java - This Class extends TypeTwoException. this exception is kind of TypeTwoException
                            called when the problem is in the file format
FilterException.java - This Class extends TypeOneException. this exception is kind of oneTypeException called
                        when the problem is in the Filter line
OrderException.java - This Class extends TypeOneException. this exception is kind of oneTypeException called
                         when the problem is in the Order line
SourceException.java - This Class extends TypeTwoException. this exception is kind of TypeTwoException called
                        when the problem is in the source files
SubsectionException.java - This Class extends TypeTwoException. this exception is kind of TypeTwoException
                           called when the problem is in subsection in the command file
TypeOneException.java - This Class extends Exception. this exception is oneTypeException called when the
                        problem is in the line but we can make the default order or filter
TypeTwoException.java - this class extends exception. this is a kind of exception that alerts of fatal errors
                        in the program given values.
WrongArgumentsException.java - This Class extends TypeTwoException. this exception is kind of TypeTwoException
                                called when the problem is in the number of arguments in the program

* filters package, that holds all the filter classes:

AllFilter.java - Filter that pass all the files. Extends Filter class.
BetweenFilter.java - Filter that checks if file size is between (inclusive) the given numbers (in k-bytes).
                        Extends Filter class.
ContainsFilter.java - Filter that checks if the given value is contained in the file name (excluding path).
                        Extends Filter class.
ExecutableFilter.java - Filter that checks if file have execution permission. Extends Filter class.
FileNameFilter.java - Filter that checks if the given value equals the file name (excluding path).  Extends
                        Filter class.
Filter.java -  Filters will return all files in Source Directory that match a certain criterion. Only files
                are returned (not directories). Only files that are directly under the source directory are
                 returned (files that are in directories that are under the source directory should not be
                 returned). this is an abstract class which all the other filters extends.
FilterFactory.java - class that create an array with all the type of filters, using factory structure and
                        singleton- like data members - only one per each filter will be made and held.
GreaterThanFilter.java - Filter that checks if file size is strictly greater than the given number of given
                            k-bytes. Extends Filter class.
HiddenFilter.java - Filter that checks if the file a hidden file. Extends Filter class.
PrefixFilter.java - Filter that checks if the prefix of the file name is as the given value.  Extends Filter
                        class.
SmallerThanFilter.java - Filter that checks if file size is strictly less than the given number of k-bytes.
                            Extends Filter class.
SuffixFilter.java - Filter that checks if the suffix of the file name is as the given value.  Extends Filter
                    class.
WritableFilter.java - Filter that checks if file have writing permission (for the current user).  Extends
                        Filter class.

* orders package, that holds all the order classes:
AbsOrder.java - Class extends Order, determines the hierarchy between two files by the default.
Order.java - Class extends Order, determines the hierarchy between two files by the default.
OrderFactory.java - constructor, create array with all type of order comparator, using factory structure and
                    singleton- like data members - only one per each filter will be made and held.
SizeOrder.java - Class extends Order, determines the hierarchy between two files by the size of the file.  if
                    two files have the same size, the hierarchy will be determined by the default comparator.
TypeOrder.java - Class extends Order, determines the hierarchy between two files by the type of the file. if
                    two files have the same type, the hierarchy will be determined by the default comparator.

* in addition, we have the program managers inside the filesprocessing package:
DirectoryProcessor.java -  The Main class , get the argument from the user, checks if there is exactly two
                            arguments , and if so will run the project. otherwise it will print the error and
                             stop.
FileParsing.java -the file parsing class. the constructor will get two arguments: the filesDirectoryPath
                   which is the directory of the files to filter and order, and the commandFilePath which is
                   the actual filter and order values to act on. it will read the commands file, and will
                   print for each section inside the matching files. in event of wrong filter or order, the
                   program will use the default as constructed in the order and filter factories, and print
                   a warning in the matching line. in event of fatal error as wrong file address or
                   format (etc.) the program will throw a TypeTwoException. in order to run this
                   class is it needed to create an instance with the proper values and to run the parsefile
                   function.

=============================
=          Design           =
=============================
Our code is designed in a way that there is a class that receives the input from the user and analyzes
it. If the input contains the appropriate files, it passes it on to the next class that process the input.
this class divides the commands into separate sections and executes each section separately. Each section
consists of a filter and an Order. The department uses the filter package and the package of Order.
In this way we have created a modular code so that each layer realizes its exactly role. We will explain
later the modularity of each package.

In our code we used the single choice principle when we created a package for each element in the program.
If we want to add/remove/change filter, Order, or exception, we will need to change this in one
place only- in the class that represents the object we want to change / add / remove. The class that
manages the project does not "care" what is going on inside the packages, so it may prevent errors that may
arise from these classes, Because these classes handle all the exceptions associated with themselves. In
general, it can be said that there is no connection between the classes that use the packages that we
created and the classes themselves.
Also, each package we created has a super class and all the other classes inherited from it

In the filter - we have a general filter that is an abstract class, all the other
filters apply the filter. By requiring each filter to fulfill the abstract filter we prevent future
problems that may arise.

In the Order - we have an abstract order and all the type of order inherited from it

In the Exception - we have two type if exception and each exception inherit from the type of exception
appropriate to it.

=============================
=  Implementation details   =
=============================
we have package for each of the main elements of the program: filter, order and exceptions.
the filter and order act in a similar way: they have an abstract class that all the other sub-classes in the
package (excluding the factory) extends and uses.
they also have a factory class- a STATIC (singleton- like) array which contains a single instance of each
sub-class, and the default one, in order to use known and constant memory-space. it has a instance function
which return the only instance of the class, and will do all the functions and handling internally. this act
on the single-choice principle and can be modified very easily - by only adding a class of new filter and the
proper creating lines in the factory.

the exceptions class works in the same way - it has two types of general exceptions that each exception will
extend according to its type. this way we can catch all the typeTwo exception, for example, in one place (the
main method).

the directory processor will only check for number of arguments entered and run the fileParsing class, which
will do all the work and print by calling the parseFile method.

it is very easy to change (add\remove elements) the program because of the static members in the factory and
the abstract classes implemented in the program. thus using the single-choice principle.


=============================
=    Answers to questions   =
=============================
- Describe the exceptions hierarchy you used in order to handle errors in the program.
   Explain the considerations that made you choose that specific design.

at the beginning we create each exception in other package, means - orderException was in order Package,
filterException was in the Filter Package. than. we though it will be more clearly and designed to create
type one and type two exception, and than all the rest exception will implement the suitability type of
exception. that's give us the possible to add another types of exception, and extend the existing type of
exception if we will want that in the feature. also, all the Exception appear in one package , that's also
make the code more clean , clear , and bright .

- How did you sort your matched files? Did you use a data structure for this purpose?
   If so, what data structure and why?

in order to sort by the given order, we chose to implement comparator , and sort the files with Arrays
function, Arrays Function gets array and sort it with the given comperator. we chose this data structure
because its more clearly, and more efficient than sort array in my own way.
